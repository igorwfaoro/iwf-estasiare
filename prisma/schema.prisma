generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EventType {
  WEDDING
}

enum UserEventRole {
  ADMIN
  EDITOR
}

model Event {
  id          BigInt          @id @default(autoincrement())
  eventType   EventType
  date        DateTime
  slug        String          @unique @db.VarChar(100)
  invitations Invitation[]
  gifts       Gift[]
  handbooks   EventHandbook[]
  usersEvent  UserEvent[]

  addressId BigInt       @unique
  address   EventAddress @relation(fields: [addressId], references: [id])

  contentId BigInt       @unique
  content   EventContent @relation(fields: [contentId], references: [id])

  financialId BigInt?         @unique
  financial   EventFinancial? @relation(fields: [financialId], references: [id])

  weddingDetailId BigInt?             @unique
  weddingDetail   EventWeddingDetail? @relation(fields: [weddingDetailId], references: [id])

  createdAt DateTime @default(now())
}

model EventAddress {
  id               BigInt @id @default(autoincrement())
  shortDescription String @db.VarChar(300)
  fullDescription  String @db.VarChar(500)
  event            Event?
}

model EventContent {
  id                 BigInt              @id @default(autoincrement())
  primaryColor       String              @db.VarChar(7)
  bannerImage        String              @db.VarChar(500)
  logoImage          String?             @db.VarChar(500)
  spotifyPlaylistUrl String?             @db.VarChar(100)
  images             EventContentImage[]
  event              Event?
}

model EventContentImage {
  id    BigInt @id @default(autoincrement())
  image String @db.VarChar(500)

  eventContentId BigInt
  eventContent   EventContent @relation(fields: [eventContentId], references: [id])
}

model EventWeddingDetail {
  id        BigInt @id @default(autoincrement())
  brideName String @db.VarChar(100)
  groomName String @db.VarChar(100)
  event     Event?
}

model EventFinancial {
  id                 BigInt  @id @default(autoincrement())
  paypalBusinessCode String? @db.VarChar(100)
  event              Event?
}

model Invitation {
  id          BigInt  @id @default(autoincrement())
  description String? @db.VarChar(200)
  guests      Guest[]

  eventId BigInt
  event   Event  @relation(fields: [eventId], references: [id])

  createdAt DateTime @default(now())
}

model Guest {
  id               BigInt    @id @default(autoincrement())
  name             String    @db.VarChar(120)
  isConfirmed      Boolean   @default(false)
  confirmationDate DateTime?

  invitationId BigInt
  invitation   Invitation @relation(fields: [invitationId], references: [id])

  createdAt DateTime @default(now())
}

model Gift {
  id          BigInt  @id @default(autoincrement())
  description String  @db.VarChar(400)
  image       String  @db.VarChar(500)
  price       Decimal @db.Decimal(10, 2)

  eventId BigInt
  event   Event  @relation(fields: [eventId], references: [id])

  createdAt DateTime @default(now())
}

model EventHandbook {
  id          BigInt @id @default(autoincrement())
  title       String @db.VarChar(150)
  description String @db.VarChar(200)
  content     String @db.Text

  eventId BigInt
  event   Event  @relation(fields: [eventId], references: [id])
}

model User {
  id    BigInt @id @default(autoincrement())
  name  String @db.VarChar(300)
  email String @unique @db.VarChar(300)

  createdAt  DateTime    @default(now())
  userEvents UserEvent[]
}

model UserEvent {
  id   BigInt        @id @default(autoincrement())
  role UserEventRole

  userId BigInt
  user   User   @relation(fields: [userId], references: [id])

  eventId BigInt
  event   Event  @relation(fields: [eventId], references: [id])
}
